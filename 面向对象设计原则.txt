设计原则的基础：
1.抽象
2.封装
3.多态
4.继承

设计原则


1.封装变化：找出应用中需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。//这样可以使得代码变化引起的不经意后果变少，系统变得更有弹性。

2.针对接口编程，而不是针对实现编程。
针对接口编程真正的意思是“针对超类型编程”
针对接口编程，关键就在多态，利用多态，程序可以针对超类型编程，执行时会根据实际状况执行到真正的行为，不会被绑死在超类型的行为上。
针对超类型编程这句话，可以更明确的说成“变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口

下面是举例：

针对实现编程：
Dog d = new Dog();
d.bark();

针对接口/超类型编程：
Animal animal = new Dog();
animal.makeSound();

3.多用组合，少用继承//可以避免继承下来的方法不满足子类的要求，也可以避免因为遗忘而忘了覆盖基类的方法产生错误。

4.开放-关闭原则： 类应该对扩展开放，对修改关闭//允许类容易扩展，在不修改现有的代码的情况下，就可以搭配新的行为。好处是这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。同时不要滥用开放-关闭原则，遵循开放-关闭原则通常会引入新的抽象层次，增加代码的复杂度。每个地方都采用开放-关闭原则，是一种浪费，会导致代码变得复杂且难以理解。


